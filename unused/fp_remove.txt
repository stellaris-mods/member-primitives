namespace = fp_remove

#has_observation_outpost = yes # on planet scope
#enable_special_project = {
#	name = "MEM_EA_UPLIFTER_SYSTEM_4_INVESTIGATION_02"
#	location = this
#	owner = root
#}
#owner = {abort_special_project = MEM_EA_UPLIFTER_SYSTEM_4_INVESTIGATION_01 }
#limit = { has_special_project = MINING_BASE_PROJECT }
#abort_special_project = {
#	type = project key
#	location = planet scope or "capital_scope" I assume for *?
#}
# abort_special_project is always in country scope
# has_special_project can has location limit?

# XXX this is the ONLY WAY, and it's even the way Paradox does it
# in the tutorial for building obsstation, what the FUCK!?
country_event = {
	id = fp_remove.999
	hide_window = yes

	mean_time_to_happen = {
		days = 1 # LUL CPU HOG MUCH JEEZ
	}
	trigger = {
		has_event_chain = "folkprimitives_chain"
	}
	immediate = {
		every_country = {
			limit = {
				is_country_type = primitive
				home_planet = {
					has_observation_outpost = yes
					is_inside_border = root
				}
			}
			save_event_target_as = removalsite
			root = {
				fp_cancel_all_types = yes
			}
		}
	}
}

this will
} error.test
every_country = {

# XXX THIS IS A FRONTIER OUTPOST CONSTRUCTION FFS GRR
# This = construction ship
# From = planet it is built on
# on_building_outpost_station
#ship_event = {
#	id = fp_remove.1
#	hide_window = yes
#	is_triggered_only = yes
#	immediate = {
#		from = {
#			save_event_target_as = removalsite
#		}
#		owner = {
#
#		}
#	}
#}

# This = country, leader attacker
# From = country, planet owner
# FromFrom = planet
# on_planet_attackers_win
country_event = {
	id = fp_remove.2
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		fromfrom = {
			save_event_target_as = removalsite
		}
		fp_cancel_all_types = yes
	}
}

# A planet has begun the colonization process.
# Scope = Planet
planet_event = {
	id = fp_remove.3
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		save_event_target_as = removalsite
		owner = {
			fp_cancel_all_types = yes
		}
	}
}

# Planet transfered OR ownerless
# scope = planet
# XXX we should probably check all planets in the galaxy now
# XXX or does this trigger for planets that lie within our borders?
planet_event = {
	id = fp_remove.4
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		save_event_target_as = removalsite
		from = {
			fp_cancel_all_types = yes
		}
	}
}

# is_inside_border
# is_owned_by

# Easiest to scope all countries?
# check if they are primitive, get home_planet and check if it's inside our borders
# any_country scopes to all countries in galaxy, from any scope

# home_planet  = for trigger, Scopes to the home planet of country
# capital_scope = for effect, Scopes to the capital planet of this country

# Triggers when a station is abandoned.
# on_border_change_station_lost
# this = ship or station being lost.
# from = country losing ownership.
ship_event = {
	id = fp_remove.5
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		every_country = {
			limit = {
				is_country_type = primitive
				home_planet = {
					is_inside_border = from
				}
			}
			save_event_target_as = removalsite
			from = {
				fp_cancel_all_types = yes
			}
		}
	}
}

# Triggered when an Empire has fleets within another Empire's borders.
# This = receiver
# From = sender
# FromFrom = fleet
# FromFromFrom = system
#on_enforce_borders
country_event = {
	id = fp_remove.6
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		every_country = {
			limit = {
				is_country_type = primitive
				home_planet = {
					is_inside_border = root
				}
			}
			save_event_target_as = removalsite
			root = {
				fp_cancel_all_types = yes
			}
		}
	}
}

# This = owner of fleet
# From = disbanded fleet
# on_fleet_disbanded
#country_event = {
#	id = fp_remove.7
#	hide_window = yes
#	is_triggered_only = yes
#
#	trigger = {
#		has_modifier = black_hole_pantagruel_research
#		from = { #if triggered by on_fleet_disbanded
#			orbit = {
#				planet = {
#					is_planet_class = pc_black_hole
#					has_modifier = black_hole_pantagruel
#				}
#			}
#		}
#	}
#
#	immediate = {
#		remove_modifier = black_hole_pantagruel_research
#	}
#}

# This = owner of fleet
# From = destroyed fleet
# on_fleet_destroyed_maintenance
#country_event = {
#	id = fp_remove.8
#	hide_window = yes
#	is_triggered_only = yes
#
#	trigger = {
#		has_modifier = black_hole_pantagruel_research
#		from = { #if triggered by on_fleet_disbanded
#			orbit = {
#				planet = {
#					is_planet_class = pc_black_hole
#					has_modifier = black_hole_pantagruel
#				}
#			}
#		}
#	}
#
#	immediate = {
#		remove_modifier = black_hole_pantagruel_research
#	}
#}
